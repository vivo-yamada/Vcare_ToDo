@model VcareTodo.Models.ViewModels.TodoViewModel
@{
    ViewData["Title"] = "ToDo管理";
}

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Vcare ToDo管理</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .header-bar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 0;
            margin-bottom: 20px;
        }
        .unscheduled-tasks {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
            min-height: 200px;
        }
        .calendar-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .task-card {
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
            cursor: move;
            transition: all 0.3s ease;
        }
        .task-card:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }
        .calendar-grid {
            display: grid;
            gap: 10px;
            margin-top: 20px;
            grid-template-columns: repeat(7, 1fr);
        }
        .calendar-day {
            background: #fafafa;
            border: 1px dashed #ddd;
            border-radius: 5px;
            padding: 10px;
            min-height: 100px;
            position: relative;
        }
        .calendar-day.today {
            background: #fff3e0;
            border-color: #ff9800;
        }
        .day-header {
            font-weight: bold;
            margin-bottom: 5px;
            font-size: 0.9em;
        }
        .drop-zone {
            border: 2px dashed #007bff;
            background: #e3f2fd;
        }
        .view-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .task-title {
            font-weight: bold;
            margin-bottom: 5px;
        }
        .task-meta {
            font-size: 0.8em;
            color: #666;
        }
        .add-task-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            font-size: 24px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            z-index: 1000;
        }
        .add-task-btn:hover {
            transform: scale(1.1);
        }
        @@media (max-width: 768px) {
            .view-controls {
                flex-direction: column;
                align-items: stretch;
                gap: 10px;
            }
            .task-card {
                font-size: 0.9em;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header-bar">
        <div class="container-fluid">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h4 class="mb-0">
                        <i class="fas fa-tasks me-2"></i>
                        Vcare ToDo管理
                    </h4>
                </div>
                <div class="col-md-6 text-end">
                    <span class="me-3">ようこそ、@Model.CurrentUserName さん</span>
                    <form asp-action="Logout" asp-controller="Account" method="post" class="d-inline">
                        <button type="submit" class="btn btn-outline-light btn-sm">
                            <i class="fas fa-sign-out-alt me-1"></i>ログアウト
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <!-- View Controls -->
        <div class="view-controls">
            <div class="d-flex align-items-center gap-3">
                <!-- View Mode Buttons -->
                <div class="btn-group" role="group">
                    <input type="radio" class="btn-check" name="viewMode" id="dayView" value="day" @(Model.ViewMode == "day" ? "checked" : "")>
                    <label class="btn btn-outline-primary" for="dayView">日</label>

                    <input type="radio" class="btn-check" name="viewMode" id="weekView" value="week" @(Model.ViewMode == "week" ? "checked" : "")>
                    <label class="btn btn-outline-primary" for="weekView">週</label>

                    <input type="radio" class="btn-check" name="viewMode" id="monthView" value="month" @(Model.ViewMode == "month" ? "checked" : "")>
                    <label class="btn btn-outline-primary" for="monthView">月</label>
                </div>

                <!-- Date Navigation -->
                <div class="d-flex align-items-center">
                    <button class="btn btn-outline-secondary btn-sm me-2" onclick="navigateDate(-1)">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <span id="currentDateDisplay" class="fw-bold">@Model.CurrentDate.ToString("yyyy年MM月dd日")</span>
                    <button class="btn btn-outline-secondary btn-sm ms-2" onclick="navigateDate(1)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>

            <!-- User Selector -->
            <div>
                <select class="form-select" id="userSelector" onchange="changeUser()">
                    @foreach (var employee in Model.Employees)
                    {
                        if (employee.コード == Model.SelectedUserCode)
                        {
                            <option value="@employee.コード" selected>@employee.氏名</option>
                        }
                        else
                        {
                            <option value="@employee.コード">@employee.氏名</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="row">
            <!-- Unscheduled Tasks -->
            <div class="col-lg-4">
                <div class="unscheduled-tasks">
                    <h5 class="mb-3">
                        <i class="fas fa-list me-2"></i>
                        未定タスク (@Model.UnscheduledTasks.Count)
                    </h5>
                    <div id="unscheduledTasksList">
                        @foreach (var task in Model.UnscheduledTasks)
                        {
                            <div class="task-card" draggable="true" data-task-id="@task.ID" onclick="editTask(@task.ID)">
                                <div class="task-title">@task.内容</div>
                                <div class="task-meta">
                                    @if (!string.IsNullOrEmpty(task.取引先名))
                                    {
                                        <span class="badge bg-secondary me-1">@task.取引先名</span>
                                    }
                                    @if (task.見積工数.HasValue)
                                    {
                                        <small>予定: @(task.見積工数)h</small>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Calendar -->
            <div class="col-lg-8">
                <div class="calendar-container">
                    <h5 class="mb-3">
                        <i class="fas fa-calendar me-2"></i>
                        カレンダー
                    </h5>
                    <div id="calendarGrid" class="calendar-grid">
                        <!-- Calendar will be generated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Task Button -->
    <button class="add-task-btn" onclick="addNewTask()" title="新しいタスクを追加">
        <i class="fas fa-plus"></i>
    </button>

    <!-- Task Detail Modal -->
    <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="taskModalLabel">タスク詳細</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="taskForm">
                        <input type="hidden" id="taskId" name="ID" />

                        <div class="row">
                            <!-- 基本情報 -->
                            <div class="col-12 mb-3">
                                <label for="taskContent" class="form-label">内容 <span class="text-danger">*</span></label>
                                <textarea class="form-control" id="taskContent" name="内容" rows="3" required></textarea>
                            </div>

                            <!-- 取引先情報 -->
                            <div class="col-md-6 mb-3">
                                <label for="customerCode" class="form-label">取引先コード</label>
                                <input type="text" class="form-control" id="customerCode" name="取引先コード" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="customerName" class="form-label">取引先名</label>
                                <input type="text" class="form-control" id="customerName" name="取引先名" />
                            </div>

                            <!-- 工数情報 -->
                            <div class="col-md-4 mb-3">
                                <label for="estimatedHours" class="form-label">予定工数</label>
                                <input type="number" step="0.1" class="form-control" id="estimatedHours" name="見積工数" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="actualHours" class="form-label">実績工数</label>
                                <input type="number" step="0.1" class="form-control" id="actualHours" name="実績工数" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="maintenanceHours" class="form-label">報告工数</label>
                                <input type="number" step="0.1" class="form-control" id="maintenanceHours" name="保守工数" />
                            </div>

                            <!-- 日付情報 -->
                            <div class="col-md-6 mb-3">
                                <label for="scheduledDate" class="form-label">予定日</label>
                                <input type="date" class="form-control" id="scheduledDate" name="作業予定日" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="completionDate" class="form-label">作業日</label>
                                <input type="date" class="form-control" id="completionDate" name="修正完了日" />
                            </div>

                            <!-- 担当者情報 -->
                            <div class="col-md-6 mb-3">
                                <label for="requester" class="form-label">客先依頼者</label>
                                <input type="text" class="form-control" id="requester" name="起案者" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="assignee" class="form-label">担当者</label>
                                <select class="form-select" id="assignee" name="担当者">
                                    @foreach (var employee in Model.Employees)
                                    {
                                        if (employee.コード == Model.CurrentUserCode)
                                        {
                                            <option value="@employee.コード" selected>@employee.氏名</option>
                                        }
                                        else
                                        {
                                            <option value="@employee.コード">@employee.氏名</option>
                                        }
                                    }
                                </select>
                            </div>

                            <!-- 備考 -->
                            <div class="col-12 mb-3">
                                <label for="remarks" class="form-label">備考</label>
                                <textarea class="form-control" id="remarks" name="備考" rows="3"></textarea>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="deleteTaskBtn" onclick="deleteTask()" style="display: none;">削除</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">キャンセル</button>
                    <button type="button" class="btn btn-primary" onclick="saveTask()">保存</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let currentDate = new Date('@Model.CurrentDate.ToString("yyyy-MM-dd")');
        let viewMode = '@Model.ViewMode';
        let selectedUserCode = '@Model.SelectedUserCode';

        // Initialize calendar on page load
        $(document).ready(function() {
            generateCalendar();
            setupDragAndDrop();
            loadScheduledTasks();
        });

        // Generate calendar based on view mode
        function generateCalendar() {
            const calendarGrid = document.getElementById('calendarGrid');
            calendarGrid.innerHTML = '';

            generateWeekView();
        }

        function generateWeekView() {
            const calendarGrid = document.getElementById('calendarGrid');

            const startOfWeek = new Date(currentDate);
            startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());

            const dayNames = ['日', '月', '火', '水', '木', '金', '土'];

            for (let i = 0; i < 7; i++) {
                const day = new Date(startOfWeek);
                day.setDate(startOfWeek.getDate() + i);

                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                dayElement.dataset.date = day.toISOString().split('T')[0];

                if (day.toDateString() === new Date().toDateString()) {
                    dayElement.classList.add('today');
                }

                dayElement.innerHTML = `
                    <div class="day-header">
                        ${dayNames[i]} ${day.getDate()}
                    </div>
                    <div class="task-container"></div>
                `;

                calendarGrid.appendChild(dayElement);
            }
        }

        function loadScheduledTasks() {
            @foreach (var task in Model.ScheduledTasks)
            {
                var taskDate = task.作業予定日?.ToString("yyyy-MM-dd");
                if (!string.IsNullOrEmpty(taskDate))
                {
                    <text>
                    (function() {
                        const taskElement = document.createElement('div');
                        taskElement.className = 'task-card';
                        taskElement.dataset.taskId = '@task.ID';
                        taskElement.draggable = true;
                        taskElement.onclick = () => editTask(@task.ID);
                        taskElement.innerHTML = `
                            <div class="task-title">@Html.Raw(task.内容?.Replace("\"", "\\\""))</div>
                            <div class="task-meta">
                                @if (!string.IsNullOrEmpty(task.取引先名))
                                {
                                    <span class="badge bg-secondary me-1">@task.取引先名</span>
                                }
                                @if (task.見積工数.HasValue)
                                {
                                    <small>予定: @(task.見積工数)h</small>
                                }
                            </div>
                        `;

                        const dayElement = document.querySelector(`[data-date="@taskDate"]`);
                        if (dayElement) {
                            dayElement.querySelector('.task-container').appendChild(taskElement);
                        }
                    })();
                    </text>
                }
            }
        }

        // Navigation functions
        function navigateDate(direction) {
            currentDate.setDate(currentDate.getDate() + (direction * 7));
            updateDateDisplay();
            reloadPage();
        }

        function updateDateDisplay() {
            const display = document.getElementById('currentDateDisplay');
            const startOfWeek = new Date(currentDate);
            startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());
            const endOfWeek = new Date(startOfWeek);
            endOfWeek.setDate(startOfWeek.getDate() + 6);
            display.textContent = `${startOfWeek.getMonth() + 1}/${startOfWeek.getDate()} - ${endOfWeek.getMonth() + 1}/${endOfWeek.getDate()}`;
        }

        // View mode change
        $('input[name="viewMode"]').change(function() {
            viewMode = this.value;
            reloadPage();
        });

        // User change
        function changeUser() {
            selectedUserCode = document.getElementById('userSelector').value;
            reloadPage();
        }

        function reloadPage() {
            const url = new URL(window.location);
            url.searchParams.set('userCode', selectedUserCode);
            url.searchParams.set('viewMode', viewMode);
            url.searchParams.set('date', currentDate.toISOString().split('T')[0]);
            window.location.href = url.toString();
        }

        // Task functions
        function addNewTask() {
            clearTaskForm();
            $('#taskModalLabel').text('新しいタスクを追加');
            $('#deleteTaskBtn').hide();
            $('#taskModal').modal('show');
        }

        function editTask(taskId) {
            $.ajax({
                url: '/Todo/GetTask',
                method: 'GET',
                data: { id: taskId },
                success: function(response) {
                    if (response.success) {
                        populateTaskForm(response.task);
                        $('#taskModalLabel').text('タスクを編集');
                        $('#deleteTaskBtn').show();
                        $('#taskModal').modal('show');
                    } else {
                        alert('エラー: ' + response.message);
                    }
                },
                error: function() {
                    alert('通信エラーが発生しました');
                }
            });
        }

        function clearTaskForm() {
            $('#taskForm')[0].reset();
            $('#taskId').val('');
            $('#assignee').val('@Model.CurrentUserCode');
        }

        function populateTaskForm(task) {
            $('#taskId').val(task.id);
            $('#taskContent').val(task.内容);
            $('#customerCode').val(task.取引先コード);
            $('#customerName').val(task.取引先名);
            $('#estimatedHours').val(task.見積工数);
            $('#actualHours').val(task.実績工数);
            $('#maintenanceHours').val(task.保守工数);

            if (task.作業予定日) {
                const date = new Date(task.作業予定日);
                $('#scheduledDate').val(date.toISOString().split('T')[0]);
            }

            if (task.修正完了日) {
                const date = new Date(task.修正完了日);
                $('#completionDate').val(date.toISOString().split('T')[0]);
            }

            $('#requester').val(task.起案者);
            $('#assignee').val(task.担当者);
            $('#remarks').val(task.備考);
        }

        function saveTask() {
            if (!$('#taskContent').val().trim()) {
                alert('内容を入力してください');
                return;
            }

            const formData = {};
            $('#taskForm').serializeArray().forEach(function(item) {
                if (item.value !== '') {
                    if (item.name === 'ID') {
                        formData[item.name] = parseInt(item.value) || null;
                    } else if (item.name === '見積工数' || item.name === '実績工数' || item.name === '保守工数') {
                        formData[item.name] = parseFloat(item.value) || null;
                    } else if (item.name === '作業予定日' || item.name === '修正完了日') {
                        formData[item.name] = item.value ? new Date(item.value).toISOString() : null;
                    } else {
                        formData[item.name] = item.value;
                    }
                }
            });

            const isEdit = formData.ID && formData.ID > 0;
            const url = isEdit ? '/Todo/UpdateTask' : '/Todo/CreateTask';

            $.ajax({
                url: url,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.success) {
                        $('#taskModal').modal('hide');
                        location.reload();
                    } else {
                        alert('エラー: ' + response.message);
                    }
                },
                error: function() {
                    alert('通信エラーが発生しました');
                }
            });
        }

        function deleteTask() {
            const taskId = $('#taskId').val();
            if (!taskId) return;

            if (confirm('本当にこのタスクを削除しますか？')) {
                $.ajax({
                    url: '/Todo/DeleteTask',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ taskId: parseInt(taskId) }),
                    success: function(response) {
                        if (response.success) {
                            $('#taskModal').modal('hide');
                            location.reload();
                        } else {
                            alert('エラー: ' + response.message);
                        }
                    },
                    error: function() {
                        alert('通信エラーが発生しました');
                    }
                });
            }
        }

        // Drag and Drop functionality
        function setupDragAndDrop() {
            $(document).on('dragstart', '.task-card', function(e) {
                e.originalEvent.dataTransfer.setData('text/plain', $(this).data('task-id'));
            });

            $(document).on('dragover', '.calendar-day', function(e) {
                e.preventDefault();
                $(this).addClass('drop-zone');
            });

            $(document).on('dragleave', '.calendar-day', function(e) {
                $(this).removeClass('drop-zone');
            });

            $(document).on('drop', '.calendar-day', function(e) {
                e.preventDefault();
                $(this).removeClass('drop-zone');

                const taskId = e.originalEvent.dataTransfer.getData('text/plain');
                const dropDate = $(this).data('date');

                updateTaskDate(taskId, dropDate);
            });
        }

        function updateTaskDate(taskId, date) {
            $.ajax({
                url: '/Todo/UpdateTaskDate',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    taskId: parseInt(taskId),
                    date: date
                }),
                success: function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('エラー: ' + response.message);
                    }
                },
                error: function() {
                    alert('通信エラーが発生しました');
                }
            });
        }
    </script>
</body>
</html>